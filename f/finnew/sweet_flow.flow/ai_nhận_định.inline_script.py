import wmill
import requests
from typing import Dict, Any
import json


def main(
    market_data: Dict[str, Any], gemini_api_key: str, analysis_type: str = "standard"
) -> Dict[str, Any]:
    """
    Ph√¢n t√≠ch th·ªã tr∆∞·ªùng b·∫±ng Gemini AI

    Args:
        market_data: D·ªØ li·ªáu th·ªã tr∆∞·ªùng ƒë√£ x·ª≠ l√Ω
        gemini_api_key: API key c·ªßa Gemini
        analysis_type: Lo·∫°i ph√¢n t√≠ch (standard, detailed, brief)

    Returns:
        K·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ AI
    """

    try:
        if not market_data.get("success"):
            raise ValueError("Invalid market data")

        data = market_data["data"]
        vnindex = data.get("vnindex_summary", {})
        foreign_data = data.get("foreign_investors", {})
        basic_metrics = data.get("basic_metrics", {})

        # T·∫°o prompt d·ª±a tr√™n lo·∫°i ph√¢n t√≠ch
        prompts = {
            "standard": _create_standard_prompt(vnindex, foreign_data, basic_metrics),
            "detailed": _create_detailed_prompt(
                vnindex, foreign_data, basic_metrics, data
            ),
            "brief": _create_brief_prompt(vnindex, basic_metrics),
        }

        prompt = prompts.get(analysis_type, prompts["standard"])

        # G·ªçi Gemini API
        url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={gemini_api_key}"

        headers = {"Content-Type": "application/json"}

        payload = {
            "contents": [{"parts": [{"text": prompt}]}],
            "generationConfig": {
                "temperature": 0.7,
                "topK": 40,
                "topP": 0.95,
                "maxOutputTokens": 1000 if analysis_type == "detailed" else 600,
            },
        }

        response = requests.post(url, headers=headers, json=payload, timeout=30)

        if response.status_code == 200:
            result = response.json()
            analysis_text = result["candidates"][0]["content"]["parts"][0]["text"]

            # Format analysis
            formatted_analysis = _format_analysis_output(analysis_text)

            print(f"Successfully generated {analysis_type} analysis")

            return {
                "success": True,
                "analysis": formatted_analysis,
                "analysis_type": analysis_type,
                "token_count": len(analysis_text.split()),
            }

        else:
            print(f"Gemini API error: {response.status_code}")
            return _get_fallback_analysis(vnindex, basic_metrics)

    except Exception as e:
        print(f"Error in Gemini analysis: {str(e)}")
        return _get_fallback_analysis(vnindex, basic_metrics)


def _create_standard_prompt(vnindex, foreign_data, basic_metrics):
    """T·∫°o prompt chu·∫©n"""
    return f"""
    B·∫°n l√† chuy√™n gia ph√¢n t√≠ch th·ªã tr∆∞·ªùng ch·ª©ng kho√°n Vi·ªát Nam. Ph√¢n t√≠ch d·ªØ li·ªáu sau:
    
    üìä VN-Index: {vnindex.get("diem", "N/A")} ƒëi·ªÉm ({vnindex.get("phan_tram", "N/A")}%)
    üí∞ GTGD: {vnindex.get("gtgd_ty_dong", "N/A")} t·ª∑ ƒë·ªìng
    üèõÔ∏è Kh·ªëi ngo·∫°i: {foreign_data.get("tien_direction", "N/A")} {foreign_data.get("tien_ty_dong", 0)} t·ª∑
    üìà T·ª∑ l·ªá m√£ tƒÉng: {basic_metrics.get("advance_ratio", 0) * 100:.1f}%
    
    H√£y ƒë∆∞a ra 3-4 nh·∫≠n ƒë·ªãnh ch√≠nh v·ªÅ:
    1. Xu h∆∞·ªõng th·ªã tr∆∞·ªùng
    2. T√¢m l√Ω nh√† ƒë·∫ßu t∆∞
    3. Khuy·∫øn ngh·ªã ng·∫Øn h·∫°n
    
    Vi·∫øt nh·∫≠n ƒë·ªãnh ng·∫Øn g·ªçn, m·ªói √Ω kho·∫£ng 10 t·ª´, k√®m s·ªë li·ªáu, b·∫Øt ƒë·∫ßu b·∫±ng d·∫•u -, kh√¥ng c·∫ßn header
    """


def _create_detailed_prompt(vnindex, foreign_data, basic_metrics, data):
    """T·∫°o prompt chi ti·∫øt"""
    hot_sectors = data.get("additional_info", {}).get("hot_sectors", [])

    return f"""
    Ph√¢n t√≠ch chi ti·∫øt th·ªã tr∆∞·ªùng ch·ª©ng kho√°n Vi·ªát Nam:
    
    üìä TH√îNG TIN CHI TI·∫æT:
    - VN-Index: {vnindex.get("diem", "N/A")} ƒëi·ªÉm ({vnindex.get("phan_tram", "N/A")}%)
    - GTGD: {vnindex.get("gtgd_ty_dong", "N/A")} t·ª∑ ƒë·ªìng
    - T·ª∑ l·ªá m√£ tƒÉng: {basic_metrics.get("advance_ratio", 0) * 100:.1f}%
    - Kh·ªëi ngo·∫°i: {foreign_data.get("tien_direction", "N/A")} {foreign_data.get("tien_ty_dong", 0)} t·ª∑
    - Ng√†nh n·ªïi b·∫≠t: {", ".join(hot_sectors) if hot_sectors else "N/A"}
    
    H√£y ph√¢n t√≠ch:
    1. ƒê√°nh gi√° t·ªïng quan xu h∆∞·ªõng
    2. Ph√¢n t√≠ch thanh kho·∫£n v√† t√¢m l√Ω
    3. T√°c ƒë·ªông c·ªßa kh·ªëi ngo·∫°i
    4. Ph√¢n t√≠ch ng√†nh
    5. D·ª± b√°o ng·∫Øn h·∫°n v√† khuy·∫øn ngh·ªã
    
    M·ªói m·ª•c 2-3 c√¢u, b·∫Øt ƒë·∫ßu b·∫±ng -
    """


def _create_brief_prompt(vnindex, basic_metrics):
    """T·∫°o prompt ng·∫Øn g·ªçn"""
    return f"""
    T√≥m t·∫Øt nhanh th·ªã tr∆∞·ªùng h√¥m nay:
    
    VN-Index: {vnindex.get("diem", "N/A")} ƒëi·ªÉm ({vnindex.get("phan_tram", "N/A")}%)
    GTGD: {vnindex.get("gtgd_ty_dong", "N/A")} t·ª∑ ƒë·ªìng
    
    ƒê∆∞a ra 2 nh·∫≠n ƒë·ªãnh ch√≠nh v√† 1 khuy·∫øn ngh·ªã. M·ªói √Ω 1 c√¢u ng·∫Øn, b·∫Øt ƒë·∫ßu b·∫±ng -
    """


def _format_analysis_output(analysis_text):
    """Format output analysis"""
    lines = analysis_text.strip().split("\n")
    formatted_lines = []

    for line in lines:
        line = line.strip()
        if line and not line.startswith("-"):
            formatted_lines.append(f"- {line}")
        elif line.startswith("-"):
            formatted_lines.append(line)

    return "\n".join(formatted_lines)


def _get_fallback_analysis(vnindex, basic_metrics):
    """Ph√¢n t√≠ch d·ª± ph√≤ng"""
    change_pct = float(vnindex.get("phan_tram", 0))

    if change_pct > 1:
        trend = "t√≠ch c·ª±c v·ªõi momentum m·∫°nh"
    elif change_pct > 0:
        trend = "nh·∫π t√≠ch c·ª±c"
    else:
        trend = "ti√™u c·ª±c v·ªõi √°p l·ª±c b√°n"

    return {
        "success": True,
        "analysis": f"""- Th·ªã tr∆∞·ªùng c√≥ xu h∆∞·ªõng {trend}
- Thanh kho·∫£n ·ªü m·ª©c {basic_metrics.get("volume_strength", "trung b√¨nh")}
- Nh√† ƒë·∫ßu t∆∞ n√™n th·∫≠n tr·ªçng v√† theo d√µi di·ªÖn bi·∫øn""",
        "analysis_type": "fallback",
        "token_count": 0,
    }
